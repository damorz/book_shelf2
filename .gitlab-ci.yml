stages:
  - publish
  - deploy

# variables:
#   TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
#   TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA

# docker-build:
#   image: docker:latest
#   stage: publish
#   services:
#     - docker:dind
#   before_script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#   script:
#     - docker build --pull -t "$CI_REGISTRY_IMAGE" .
#     - docker push "$CI_REGISTRY_IMAGE"

# $CI_REGISTRY_IMAGE
# deploy:
#   image: alpine:latest
#   stage: deploy
#   tags:
#     - deployment
#   script:
#     - chmod og= $ID_RSA
#     - apk update && apk add openssh-client
#     - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY"
#     - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT"
#     - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f my-app || true"
#     - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 80:80 --name my-app $TAG_COMMIT"


# Publish to Cloud registry=============================================================================================
# stages:
#   - publish

docker-publish:
  image: docker:latest
  stage: publish
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay
  before_script:
    # Install CA certs, openssl to https downloads, python for gcloud sdk
    - apk add --update make ca-certificates openssl python3
    - update-ca-certificates
    # Write our GCP service account private key into a file
    - echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
    # Download and install Google Cloud SDK
    - wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
    - tar zxvf google-cloud-sdk.tar.gz && ./google-cloud-sdk/install.sh --usage-reporting=false --path-update=true
    - google-cloud-sdk/bin/gcloud --quiet components update
    - google-cloud-sdk/bin/gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    - docker login -u _json_key --password-stdin https://us.gcr.io < ${HOME}/gcloud-service-key.json
  script:
    - docker build -t $IMAGE_NAME .
    - docker tag $IMAGE_NAME us.gcr.io/$GCLOUD_PROJECT_ID/$IMAGE_NAME
    - docker push us.gcr.io/$GCLOUD_PROJECT_ID/$IMAGE_NAME:latest
  only:
    - main


deploy_production:
  image: google/cloud-sdk:alpine
  stage: deploy
  environment: Production
  only:
  - main
  script:
  - echo $GCLOUD_SERVICE_KEY > /tmp/$CI_PIPELINE_ID.json
  - gcloud auth activate-service-account --key-file /tmp/$CI_PIPELINE_ID.json
  - gcloud config set project solid-idiom-295016 
  - gcloud run deploy bookshelf --platform managed --image us.gcr.io/$GCLOUD_PROJECT_ID/$IMAGE_NAME:latest
# ========================================================================================================================

# deployment:
#   image: registry.gitlab.com/damorz/book_shelf:latest
#   stage: deploy
#   script:
#     - npm run build
#     - rm -rf public
#     - mv dist public
#   artifacts:
#     paths:
#       - public
#   only:
#     - main


# pages:
#   image: node:latest
#   stage: deploy
#   script:
#     - npm install
#     - npm run build
#     - rm -rf public
#     - mv dist public
#   artifacts:
#     paths:
#     - public
#   only:
#   - main



