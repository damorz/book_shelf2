
# stages:
#   - build

# dist-build:
#   image: node:latest
#   stage: build
#   script:
#     - npm install
#     - npm run build
#     - rm -rf public
#     - mv dist public

# docker-build:
#   image: docker:latest
#   stage: build
#   services:
#     - docker:dind
#   before_script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#   script:
#     - docker build --pull -t "$CI_REGISTRY_IMAGE" .
#     - docker push "$CI_REGISTRY_IMAGE"
  

# deploy-container:
#   image: registry.gitlab.com/damorz/book_shelf:latest
#   stage: deploy
#   script:
#     - ./deploy.sh
#   only:
#     - main
    
    
    
# pages:
#   image: node:latest
#   stage: deploy
#   script:
#     - npm install
#     - npm run build
#     - rm -rf public
#     - mv dist public
#   artifacts:
#     paths:
#     - public
#   only:
#   - main



FROM node:lts-alpine

# install simple http server for serving static content
RUN npm install -g http-server

# make the 'app' folder the current working directory
WORKDIR /app

# copy both 'package.json' and 'package-lock.json' (if available)
COPY package*.json ./

# install project dependencies
RUN npm install

# copy project files and folders to the current working directory (i.e. 'app' folder)
COPY . .

# build app for production with minification
RUN npm run build

EXPOSE 8080
CMD [ "http-server", "dist" ]
